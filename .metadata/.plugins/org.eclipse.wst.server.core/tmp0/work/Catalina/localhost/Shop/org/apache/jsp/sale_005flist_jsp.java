/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2022-12-03 05:49:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.text.*;

public final class sale_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
 request.setCharacterEncoding("UTF-8"); 
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>쇼핑 목록</title>\r\n");
      out.write("<SCRIPT language=\"javascript\">\r\n");
      out.write("	function setvalue(f){\r\n");
      out.write("		f.quantity.value=0;\r\n");
      out.write("		f.submit();\r\n");
      out.write("	}\r\n");
      out.write("</SCRIPT>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<P align=center>\r\n");
      out.write("	<FONT color=#0000ff face=굴림 size=+1>\r\n");
      out.write("		<STRONG>쇼핑 목록</STRONG>\r\n");
      out.write("	</FONT>\r\n");
      out.write("</P>\r\n");
      out.write("<CENTER>\r\n");
      out.write("<TABLE border=0 width=600 cellpadding=4 cellspacing=4 style=\"font-size:10pt\">\r\n");
      out.write("<TR>\r\n");
      out.write("	<TH width=5% bgcolor=#003399>\r\n");
      out.write("		<FONT color=black face=굴림><NOBR>번호</NOBR></FONT>\r\n");
      out.write("	</TH>\r\n");
      out.write("	<TH width=20% bgcolor=#003399>\r\n");
      out.write("		<FONT color=black face=굴림><NOBR>상품명</NOBR></FONT>\r\n");
      out.write("	</TH>\r\n");
      out.write("	<TH width=20% bgcolor=#003399>\r\n");
      out.write("		<FONT color=black face=굴림><NOBR>제조원</NOBR></FONT>\r\n");
      out.write("	</TH>\r\n");
      out.write("	<TH width=25% bgcolor=#003399>\r\n");
      out.write("		<FONT color=black face=굴림><NOBR>주문수량</NOBR></FONT>\r\n");
      out.write("	</TH>\r\n");
      out.write("	<TH width=10% bgcolor=#003399>\r\n");
      out.write("		<FONT color=black face=굴림><NOBR>판매가(원)</NOBR></FONT>\r\n");
      out.write("	</TH>\r\n");
      out.write("	<TH width=15% bgcolor=#003399>\r\n");
      out.write("		<FONT color=black face=굴림><NOBR>합계(수량*판매가)</NOBR></FONT>\r\n");
      out.write("	</TH>\r\n");
      out.write("</TR>\r\n");

	long id=0;
		
	session = request.getSession();
	
	String[] a= session.getValueNames();
	
	String where="1";
	
	String ca="";
	String pn="";
	int qty=0;
	int count=0;
	
	if(request.getParameter("go") !=null)
		if(!(request.getParameter("go").equals("")))
			where=request.getParameter("go");
	
	if(request.getParameter("cat") !=null)
		if(!(request.getParameter("cat").equals("")))
			ca=request.getParameter("cat");
	
	if(request.getParameter("pname") !=null)
		if(!(request.getParameter("pname").equals("")))
			pn=request.getParameter("pname");
	
	NumberFormat nf = NumberFormat.getNumberInstance();
	
	String pricestr="";
	String hap="";
	int price=0;
	long total=0;
	
	Connection con = null;
	Statement st = null;
	ResultSet rs = null;
	String sql = null;
	
	try {
		Class.forName("com.mysql.cj.jdbc.Driver");
	} catch (ClassNotFoundException e) {
		out.println(e);
	}
	/* DB연결부분 */
	try {
		con = DriverManager.getConnection(
		"jdbc:mysql://localhost:3306/shop?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC", "root",
		"1234");
	} catch (SQLException e) {
		out.println(e);
	}
	
	try{
		
		st= con.createStatement();
		
		for(int i=0; i<a.length; i++){
			id=Long.parseLong(a[i].trim());
			qty=((Integer)session.getValue(a[i])).intValue();
			sql = "select * from product where id=" + id;
			rs = st.executeQuery(sql);
			
			if(rs.next()){
				count = count+1;
				price = rs.getInt("downprice");
				pricestr = nf.format(price);
				hap = nf.format(price*qty);
				total=total+(price*qty);
				out.println("<FORM method=post action=\'/Shop/sale_upd.jsp\'>");
				out.println("<TR>");
				out.println("<TH width=5% bgcolor=#eeeeee>");
				out.println(i+1+"</TH>");
				out.println("<TD width=20% bgcolor=#eeeeee>");
				out.println(rs.getString("pname")+"</TD>");
				out.println("<TD width=15% bgcolor=#eeeeee>");
				out.println(rs.getString("sname")+"</TD>");
				out.println("<TD width=30% bgcolor=#eeeeee>");
				out.println("<INPUT type=text name=quantity size=2 value=" + qty + ">개<br/>");
				out.println("<INPUT type=hidden name=id value=" + id+">");
				out.println("<INPUT type=hidden name=go value=" + where+ ">");
				out.println("<INPUT type=hidden name=cat value=" + ca+ ">");
				out.println("<INPUT type=hidden name=pname value=" + pn+ ">");
				out.println("<INPUT type=submit value=수정>");
				out.println("<INPUT type=button value=삭제 onClick=\"setvalue(this.form);\">");
				out.println("</TD>");
				out.println("<TD width=10% bgcolor=#eeeeee align=right>");
				out.println(pricestr + "</TD>");
				out.println("<TD width=10% bgcolor=#eeeeee align=right>");
				out.println(hap+ "</TD>");
				out.println("</TR></FORM>");
				
			}
		}
		
		out.println("<TR>");
		out.println("<TD width=10% align=right colspan=6");
		out.println("주문 상품:" + count + "품목&nbsp;&nbsp;");
		out.println("주문 총 합계 금액:" + nf.format(total)+ "원</TD");
		out.println("</TR>");
		out.println("</TABLE>");
		st.close();
		con.close();
		
		out.print("[<A href=\"/Shop/shop_list.jsp?go="+ where);
		out.print("&cat=" + ca + "&pname=" + pn+"\">계속 쇼핑하기</A>]");
		
		out.println("[<A href=\"order.jsp?total="+total+"&count="+count+"\">주문하기</A>]");
	}catch(SQLException e){
		out.println(e);
	}
	
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</TABLE>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
