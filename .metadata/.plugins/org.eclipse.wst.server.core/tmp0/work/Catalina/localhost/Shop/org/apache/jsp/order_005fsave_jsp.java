/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2022-12-03 07:06:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.text.*;

public final class order_005fsave_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
 request.setCharacterEncoding("UTF-8"); 
      out.write("\r\n");
      out.write("\r\n");

	session = request.getSession();
	
	String[] a = session.getValueNames();
	
	String cardno="";
	String wname = request.getParameter("wname");
	String addr = request.getParameter("addr");
	String tel = request.getParameter("tel");
	String pay = request.getParameter("pay");
	
	if(pay.equals("card"))
		cardno=request.getParameter("number");
	
	int count = Integer.parseInt(request.getParameter("count"));
	long total = Long.parseLong(request.getParameter("total"));
	
	long id=0;
	int num=0;
	int qty=0;
	String pname="";
	
	java.util.Date yymmdd = new java.util.Date();
	SimpleDateFormat myformat = new SimpleDateFormat("yy-MM-d h:mm a");
	String ymd = myformat.format(yymmdd);
	String sql = null;
	
	Connection con = null;
	Statement st= null;
	ResultSet rs = null;
	
	int cnt = 0;
	int cnt2 = 0;
	int price=0;
	
	try {
		Class.forName("com.mysql.cj.jdbc.Driver");
	} catch (java.lang.ClassNotFoundException e) {
		out.println(e.getMessage());
	}
	/* DB연결부분 */
	try {
		con = DriverManager.getConnection(
		"jdbc:mysql://localhost:3306/shop?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC", "root",
		"1234");
		st = con.createStatement();
		
		sql = "select max(id) from saleorder";
		rs = st.executeQuery(sql);
		
		if(rs.next())
			id=rs.getLong(1) + 1;
		else
			id=1;
		
		sql = "insert into saleorder(id,name,orderdate,addr,tel,pay,cardno,prodcount,total)" ;
		sql += "values("+id+", '"+wname+"','"+ymd+"','"+addr+"','"+tel+"','"+pay+"','"+cardno+"',"+count+","+total+")" ;
		cnt = st.executeUpdate(sql);
		
		if(cnt>0){
			for(int i=0; i<a.length; i++){
				long pid = Long.parseLong(a[i].trim());
				qty = ((Integer)session.getValue(a[i])).intValue();
				num=i+1;
				sql="select pname,downprice from product where id= " + pid;
				rs = st.executeQuery(sql);
				rs.next();
				pname=rs.getString(1);
				price=rs.getInt(2);
				sql = "insert into item(orderid,mynum,prodid,pname,quantity,price)" ;
				sql = sql + "values("+id+","+num+","+pid+",'"+pname+"',"+qty+","+price+")" ;
				cnt2 = cnt2+st.executeUpdate(sql);
			}
			
			if(cnt2==count){
				out.println("주문이 정상적으로 처리되었습니다.");
				session.invalidate();
				out.println("[<A href=\"order_list.jsp?id="+id+"\">주문서보기</A>]");
			}else{
				out.println("상품에 대한 주문이 처리되지 못했습니다.");
				out.println("[<A href=\"shop_list.jsp\">상품 목록으로</A>]");
			}
		}
		st.close();
		con.close();
	}catch(SQLException e){
		out.println(e.getMessage());
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
